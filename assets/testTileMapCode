package com.pvz.game;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.particles.batches.BillboardParticleBatch;
import com.badlogic.gdx.maps.MapObject;
import com.badlogic.gdx.maps.MapObjects;
import com.badlogic.gdx.maps.objects.RectangleMapObject;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer.Cell;
import com.badlogic.gdx.maps.tiled.TmxMapLoader;
import com.badlogic.gdx.maps.tiled.renderers.OrthogonalTiledMapRenderer;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.pvz.game.tiles.*;
import com.pvz.game.ui.SunManager;
import com.pvz.game.zombies.ZombieManager;
import com.pvz.game.mower.Mower;
import com.pvz.game.mower.MowerManager;
import com.pvz.game.plants.Peashooter;
import com.pvz.game.plants.Plant;
import com.pvz.game.plants.Sunflower;
import com.pvz.game.projectiles.Pea;

public class TilemapOverlay {

	// public List<PlantTile> plants= new LinkedList<PlantTile>();
	private Map<Vector2, PlantTile> plants = new HashMap<Vector2, PlantTile>();
	private Map<Vector2, AbstractTile> base = new HashMap<Vector2, AbstractTile>();
	private Map<Vector2, TargetTile> targets = new HashMap<Vector2, TargetTile>();

	private Texture grass;
	private Texture houseBG;
	private Texture uiBG;
	private Texture uiSeeds;

	private TiledMap isoMap;
	private Vector2 baseCorner = new Vector2();

	private BackgroundTile background;
	private ArrayList<UiSeedTile> seedPackets;
	private ArrayList<Rectangle> packetHitboxes;
//	private UiSeedTile seedPacket;

	private SunManager sunManager;

	public static String[][] map = { { "0", "0", "0", "0", "0", "0", "0", "0", "0" },
			{ "0", "0", "0", "0", "0", "0", "0", "0", "0" }, { "0", "0", "0", "0", "0", "0", "0", "0", "0" },
			{ "0", "0", "0", "0", "0", "0", "0", "0", "0" }, { "0", "0", "0", "0", "0", "0", "0", "0", "0" },
			{ "0", "0", "0", "0", "0", "0", "0", "0", "0" }, };

	private ArrayList<Plant> plantsStatic = new ArrayList<Plant>();

	public static final float TILE_WIDTH = 48;
	public static final float TILE_HEIGHT = 48;

	// This is really horrible, but since im using an overlayed image these offsets
	// have to exist
	public static Vector2 horribleBackgroundOffset = new Vector2(-(6 * TILE_WIDTH) + (TILE_WIDTH / 4) + 1,
			-TILE_HEIGHT / 2 + 2);


	private MowerManager mowers = new MowerManager();
	private Vector2 corner;
	private ZombieManager zombies;

	public TilemapOverlay(TiledMap iso, SunManager sm) {
		isoMap = iso;
		grass = new Texture("grass.png");
		grass.setFilter(TextureFilter.Nearest, TextureFilter.Nearest);
		houseBG = new Texture("background6x9.png");
		uiBG = new Texture("ui.png");
		uiSeeds = new Texture("seed_packet.png");

		baseCorner.x = isoMap.getLayers().get(0).getOffsetX();
		baseCorner.y = isoMap.getLayers().get(0).getOffsetY();

		seedPackets = new ArrayList<UiSeedTile>();
		packetHitboxes = new ArrayList<Rectangle>();

		sunManager = sm;
		loadPlants();
		fillMap();
		System.out.println(horribleBackgroundOffset);
		System.out.println(baseCorner);
	}

	private void loadMowers() {
	  	for(int row = 1; row < map.length+1; row++) {
			float x =  base.get(new Vector2(row, 8)).getWorldPos().x - TILE_WIDTH /12f;
			float y =  base.get(new Vector2(row, 8)).getWorldPos().y + TILE_HEIGHT/3f;
			mowers.addMower(new Mower(x, y));
		}
	}

	private void loadTargetTiles(){
		int col = 8;
		for(int row = 1; row < map.length+1; row++) {
			float x =  base.get(new Vector2(row, col)).getWorldPos().x - TILE_WIDTH /12f + TILE_WIDTH/2f;
			float y =  base.get(new Vector2(row, col)).getWorldPos().y + TILE_HEIGHT/3f + TILE_HEIGHT /2f;
			targets.put(new Vector2(row,col), new TargetTile(new Vector2(row, col), new Vector2(x,y)));
		}
	}

	public ZombieManager getZombies(){
		return zombies;
	}
	public Map<Vector2, AbstractTile> getBase() {
		return base;
	}
	private void loadPlants() {
		plantsStatic.add(new Peashooter());

		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
		plantsStatic.add(new Sunflower());
	}

	public void render(SpriteBatch batch, float delta) {

		background.render(batch);

//		seedPacket.render(batch);
		for (UiSeedTile tile : seedPackets) {
			tile.render(batch);
		}

		mowers.render(batch, delta);
		for (Map.Entry<Vector2, PlantTile> entry : plants.entrySet()) {
			entry.getValue().render(batch, delta);
		}

		for (Map.Entry<Vector2, AbstractTile> entry : base.entrySet()) {
			entry.getValue().render(batch);
		}

		zombies.render(batch, delta);
	}

	public Vector2 getCorner() {
		return baseCorner;
	}
	public Vector2 getCorner2() {
		return corner;
	}

	public Vector2 getDebug() {
		return base.get(new Vector2(1, 8)).getWorldPos();
	}

	public void fillMap() {
//		System.out.println(zombies.getzombies());

		System.out.println(baseCorner);
		corner = baseCorner.add(new Vector2((map.length) * (TILE_WIDTH / 2) + TILE_WIDTH / 2,
				-(map[map.length - 1].length) * (TILE_HEIGHT / 4)));
		corner = new Vector2(baseCorner.x, baseCorner.y);
		System.out.println("Corner x");
		System.out.println(baseCorner);
		background = new BackgroundTile(houseBG, new Vector2(0, 0),
				new Vector2(baseCorner.x + horribleBackgroundOffset.x, baseCorner.y + horribleBackgroundOffset.y));
		// 19, 215
		// 37, 207
		// +18 -8
		// 14 width
//		seedPacket = new UiSeedTile(uiSeeds, new Vector2(0, 0), new Vector2(baseCorner.x + 19, baseCorner.y + 215 - 19 ));
		for (int i = 0; i < 8; i++) {
			UiSeedTile tile = new UiSeedTile(new Texture("packets/" + i + ".png"), new Vector2(0, 0),
					new Vector2(baseCorner.x + 19 + (i * 18), baseCorner.y + (215 - (i * 9))));
			tile.setHitbox(new Rectangle(baseCorner.x + 19 + (i * 18), baseCorner.y + (215 - (i * 9)), 14, 19));
			tile.setPlant(plantsStatic.get(i));
			seedPackets.add(tile);
//			packetHitboxes.add();
		}
		for (int row = 1; row < map.length + 1; row++) {
			for (int col = 0; col < map[row - 1].length; col++) {
				float x = corner.x + ((row - col) * TILE_WIDTH / 2);
				float y = corner.y + ((col + row) * TILE_HEIGHT / 4);
				base.put(new Vector2(row, col), new HoverTile(new Vector2(row, col), new Vector2(x, y)));
			}
		}
		zombies = new ZombieManager(this);
		for (int row = 1; row < map.length + 1; row++) {
			for (int col = 0; col < map[row - 1].length; col++) {
						float x = corner.x + ((row - col) * TILE_WIDTH / 2);
						float y = corner.y + ((col + row) * TILE_HEIGHT / 4);
				plants.put(new Vector2(row, col),
						new PlantTile(null, new Vector2(row, col), new Vector2(x, y), base, sunManager, zombies));
			}
		}

		loadMowers();
		loadTargetTiles();
	}

	public ArrayList<UiSeedTile> getPackets() {
		return this.seedPackets;
	}

	public AbstractTile get(float mouseX, float mouseY) {

		for (Map.Entry<Vector2, AbstractTile> entry : base.entrySet()) {
			AbstractTile tile = entry.getValue();
			Vector2 tilePos = tile.getWorldPos();
			float tileX = tilePos.x - baseCorner.x;
			float tileY = tilePos.y - baseCorner.y;

			float isoX = (mouseX - baseCorner.x - TILE_WIDTH / 2) / (TILE_WIDTH / 2);
			float isoY = (mouseY - baseCorner.y - TILE_HEIGHT / 4) / (TILE_HEIGHT / 4);

			float tileMouseX = (isoY + isoX) / 2;
			float tileMouseY = (isoY - isoX) / 2;

			if (Math.round(tileMouseX) == tile.getTilemapPos().x && Math.round(tileMouseY) == tile.getTilemapPos().y) {
				if (plants.get(tile.getTilemapPos()).getTexture() == null) {
					return tile;
				}
			}
		}
		return null;
	}

	public void plant(AbstractTile target, Plant p) {

		PlantTile tile = plants.get(target.getTilemapPos());
		Plant plant;
		try {
			plant = p.cloneWithTile(tile);
			tile.setTexture(plant.getTexture());
			tile.setAnimation(plant.getAnimation(), plant.getAnimationFrames());
			tile.setPlant(plant);
		} catch (CloneNotSupportedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//		System.out.printlgn(plant);

//		tile.setPlant(peashooterPlant);
//		tile.getPlant().setTile(tile);

	}

	public void set(AbstractTile target, Texture sprite) {
		base.get(target.getTilemapPos()).setTexture(sprite);
	}

	public void resetTileTexture(AbstractTile target) {
		base.get(target.getTilemapPos()).setTexture(null);
	}

	public Map<Vector2, PlantTile> getPlantLayer() {
		return this.plants;
	}
	public Map<Vector2, AbstractTile> getBaseLayer() {
		return this.base;
	}

	public MowerManager getMowers() {
		return mowers;
	}

	public Map<Vector2, TargetTile> getTargetLayer() {
		return targets;
	}
}
